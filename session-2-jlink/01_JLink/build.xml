<?xml version="1.0" encoding="UTF-8"?>
<project name="01_JLink" default="run">
  <target name="init">
    <property name="src.dir" value="src"/>
    <property name="mods.dir" value="mods"/>
    <property name="lib.dir" value="mlib"/>
    <property name="astro.dir" value="${src.dir}/org.astro"/>
    <property name="astro.dist" value="${mods.dir}/org.astro"/>
    <property name="module.name" value="com.greetings"/>
    <property name="greetings.dir" value="${src.dir}/${module.name}"/>
    <property name="greetings.dist" value="${mods.dir}/${module.name}"/>
    <property name="astro.jar" value="${lib.dir}/org.astro@1.0.jar"/>
    <property name="greetings.jar" value="${lib.dir}/com.greetings.jar"/>
    <property name="module.main" value="com.greetings.Main"/>
    <property name="exec.dir" value="executable"/>
  </target>

  <target name="prepare" depends="init">
    <mkdir dir="${mods.dir}"/>
    <mkdir dir="${lib.dir}"/>
    <mkdir dir="${astro.dist}"/>
    <mkdir dir="${greetings.dist}"/>
  </target>

  <target name="run-tree" depends="init">
    <echo>*** Displaying the contents of the '${dir}' folder ***</echo>
    <exec executable="tree">
      <arg value="-fl"/>
      <arg value="${dir}"/>
    </exec>
  </target>

  <target name="compile" depends="prepare">
    <antcall target="run-tree">
      <param name="dir" value="${src.dir}"/>
    </antcall>

    <javac srcdir="${astro.dir}"
      destdir="${astro.dist}"
      includeantruntime="false">
    </javac>

    <javac srcdir="${greetings.dir}"
      destdir="${greetings.dist}"
      modulepath="${mods.dir}"
      includeantruntime="false">
    </javac>

    <antcall target="run-tree">
      <param name="dir" value="${mods.dir}"/>
    </antcall>
  </target>

  <target name="jar" depends="compile">
    <jar basedir="${astro.dist}" destfile="${astro.jar}">
      <manifest>
        <attribute name="Module-Version" value="1.0"/>
      </manifest>
    </jar>

    <!--
    <jar basedir="${greetings.dist}" destfile="${greetings.jar}">
      <manifest>
        <attribute name="Main-Class" value="${module.main}"/>
      </manifest>
    </jar>
    -->
    <exec executable="jar">
      <arg line="--create --file ${greetings.jar}"/>
      <arg line="--main-class ${module.main}"/>
      <arg line="-C ${greetings.dist} ."/>
    </exec>
    <antcall target="run-tree">
      <param name="dir" value="${lib.dir}"/>
    </antcall>
  </target>

  <target name="link" depends="clean, jar">
    <exec executable="jlink">
      <arg line="--module-path ${java.home}/jmods:${lib.dir}"/>
      <arg line="--add-modules ${module.name}"/>
      <arg line="--output ${exec.dir}"/>
    </exec>
    <antcall target="run-tree">
      <param name="dir" value="${exec.dir}"/>
    </antcall>
  </target>

  <target name="run" depends="link">
    <echo>
      *** Running 'com.greetings.Main' from the module 'com.greetings' using the java in the 'executable' folder ***
      *** The 'executable' folder is a distributable folder and we should be able to run it independent on another machine but for the same platform ***
      *** Using the command-line action 'executable/bin/java --module com.greetings com.greetings.Main' ***
      *** Please note that the distributable is platform specific ***
    </echo>
    <exec executable="${exec.dir}/bin/java">
      <arg line="-jar ${greetings.jar}"/>
      <arg value="${module.main}"/>
    </exec>

    <echo>
      *** Running 'com.greetings.Main' from the via the main jar file in a separate 'mlib' folder using the java launcher in the 'executable' folder ***
    </echo>
    <exec executable="${exec.dir}/bin/java">
      <arg line="--module ${module.name}"/>
      <arg value="${module.main}"/>
    </exec>
  </target>

  <target name="inspect" depends="link">
    <echo>
      *** Size (footprint) of the distributable JDK binary (executable folder) ***
    </echo>
    <exec executable="du">
      <arg line="-sh ${exec.dir}"/>
    </exec>
    <echo>
      *** The 'modules' file in the 'executable/lib' folder contains the compressed image of all the modules (JDK + your application modules) ***
      *** We know this cause we can run 'jimage' on 'modules' and see its contents, below is some info on the image file ***
    </echo>
    <exec executable="jimage">
      <arg line="info ${exec.dir}/lib/modules"/>
    </exec>
  </target>

  <target name="clean" depends="init">
    <delete dir="${lib.dir}"/>
    <delete dir="${mods.dir}"/>
    <delete dir="${exec.dir}"/>
  </target>
</project>
